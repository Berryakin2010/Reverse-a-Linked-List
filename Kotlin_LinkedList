#!/usr/local/bin/kotlin

class ListNode(var value: Int, var next: ListNode? = null)

class LinkedList {
    var head: ListNode? = null

    fun append(value: Int) {
        if (head == null) {
            head = ListNode(value)
        } else {
            var current = head
            while (current?.next != null) {
                current = current.next
            }
            current?.next = ListNode(value)
        }
    }

    fun printList() {
        var current = head
        while (current != null) {
            print("${current.value} -> ")
            current = current.next
        }
        println("null")
    }

    fun reverse() {
        var prev: ListNode? = null
        var current = head
        while (current != null) {
            val nextNode = current.next
            current.next = prev
            prev = current
            current = nextNode
        }
        head = prev
    }
}

fun main() {
    val ll = LinkedList()
    ll.append(1)
    ll.append(2)
    ll.append(3)
    ll.append(4)
    ll.append(5)

    println("Original List:")
    ll.printList()

    ll.reverse()

    println("Reversed List:")
    ll.printList()
}
